#---------------------------------------------
# General
#---------------------------------------------
# MultiScanner service account
ms_user: multiscanner

# To generate the password, use:
# python -c 'python -c 'import crypt; print crypt.crypt("Mult1Sc4nn3r1337", "mscanFTW")'
# Replace password and salt with your own values, and update the variable below
ms_password: mscCKySlct48Y

# File transfer
local_resource_prefix: resources
remote_resource_prefix: /tmp

#---------------------------------------------
# Python 3
#---------------------------------------------
python_version: 3.6.0
python_version_major_minor: 3.6
python_mod_wsgi_version: 36
python_install_prefix: /usr/local

# Directory under which to unzip multiscanner
multiscanner_install_prefix: /opt
multiscanner_venv: /opt/venv_multiscanner

#---------------------------------------------
# ELK-related
#---------------------------------------------
elasticco_gpg_key: GPG-KEY-elasticsearch
elasticsearch_cluster: multiscanner_es_cluster

#---------------------------------------------
# DFS related
#---------------------------------------------
gluster_version: NORMALIZED
dfs_gluster_centos_sig_version: 310
dfs_mount_dir: /mnt/samples
gluster_brick_dir: /gsrv/ms_sample_brick
dfs_gluster_brick_name: ms_samples

dfs_firewall_zone: public
dfs_ports:
  - 111/tcp
  - 24007-24011/tcp
  - 49152-49153/tcp
  - 111/udp

#---------------------------------------------
# Task DB related
#---------------------------------------------
task_db_name: task_db
postgres_user: multiscanner
postgres_user_password: CHANGEME

#---------------------------------------------
# Task Broker related
#---------------------------------------------
# RabbitMQ User
ms_rabbit_user: ms_rabbit
ms_rabbit_password: CHANGE_THIS_PASSWORD

# Task queue vhost
rabbit_task_primary_vhost: ms_task

#---------------------------------------------
# API related
#---------------------------------------------
ms_firewall_zone: public
# This is the IP to which the REST service will bind
ms_rest_host: 0.0.0.0
ms_rest_port: 8080

apache_sites_available_dir: /etc/httpd/sites-available
apache_sites_enabled_dir: /etc/httpd/sites-enabled
apache_user: apache

mod_wsgi_system_module: /etc/httpd/modules/mod_wsgi-py36.cpython-36m-x86_64-linux-gnu.so

# Regex to pass to Flask CORS and Apache config to allow cross-origin requests.
# Example:
#    ms_api_cors_regex: http(s)?://(myhost1.org(:d+)?|myhost2.org(:d+)?)
#
# Defaults to {{ groups.webserver[0] }} if left blank
ms_api_cors_regex: